/** access function for fastmarching method
 *
*/


#include <iostream>
#include <string>

#include <perform_front_propagation_3d.h>

#ifdef PEYREFM_DLL
  #ifdef PEYREFM_EXPORT
    #define PEYREFM __declspec(dllexport)
  #else
    #define PEYREFM __declspec(dllimport)
  #endif
#else
  #define PEYREFM //extern
#endif



#ifdef __cplusplus
extern "C" {
#endif



extern PEYREFM void coucou(char const * text)
{
    std::cout << "coucou: " << text << "\n";
}

extern PEYREFM void test(int* dims)
{
    std::cout 
        << dims[0] << " "
        << dims[1] << " "
        << dims[2] << "\n";
}

extern PEYREFM void fast_marching(
    int* dims,                      // dimensions of the lattice
    double* weights,                // weight list
    int nstartpt,                   // number of start points
    double* startpt,                // start points
    int nendpt,                     // number of end point
    double* endpt,                  // end points
    int nitermax,                   // max nb iterations
    
    double *distance,               // output : distance
    double *state,                  // output: state
    double *index,                  // output: index
    
    bool debug               // print debug info
    )
{
    if (dims==NULL)
    {
        std::cout << "error, dims argument must not be NULL\n";
        return;
    }
    if (weights==NULL)
    {
        std::cout << "error, weights argument must not be NULL\n";
        return;
    }
    if (startpt==NULL)
    {
        std::cout << "error, startpt argument must not be NULL\n";
        return;
    }
    // if (endpt==NULL)
    // {
        // std::cout << "error, endpt argument must not be NULL\n";
        // return;
    // }
    if (distance==NULL)
    {
        std::cout << "error, distance output argument must not be NULL\n";
        return;
    }


    /// dimensions
    if (debug) std::cout 
        << "dims " << dims[0] << " " << dims[1] << " " << dims[2] << "\n";
    peyre::n = dims[0];
    peyre::p = dims[1];
    peyre::q = dims[2];

    /// weight list
    if (debug) 
    {
        std::cout << "weights\n";
        for (int i = 0; i < dims[0]*dims[1]*dims[2]; i++)
            std::cout << weights[i] << " ";
        std::cout << "\n";
    }
   
    peyre::W = weights;
    
    /// start points
    if (debug)
    {
        std::cout << "nb start points " << nstartpt << "\n";
        std::cout << "start points\n";
        for (int i = 0; i < nstartpt; i++)
            std::cout 
                << startpt[i*3] << " "
                << startpt[i*3+1] << " "
                << startpt[i*3+2] << "\n";
    }
    
    peyre::nb_start_points = nstartpt;
    peyre::start_points = startpt;
    
    /// end points
    if (debug)
    {
        std::cout << "nb end points " << nendpt << "\n";
        std::cout << "end points\n";
        for (int i = 0; i < nendpt; i++)
            std::cout 
                << endpt[i*3] << " "
                << endpt[i*3+1] << " "
                << endpt[i*3+2] << "\n";
    }
    
    peyre::nb_end_points = nendpt;
    peyre::end_points = endpt;
    
    /// max nb iterations
    if (debug) std::cout << "nb iter max " << nitermax << "\n";
    peyre::nb_iter_max = nitermax;
    
    /// heuristic
    peyre::H = NULL;
    
    /// constrait map
    peyre::L = NULL;
    
    ///value list
    peyre::values = NULL;
    
    
    /// output arguments
    
    /// distance
    peyre::D = distance;
    
    /// state
    if (state!=NULL)
    {
        peyre::S = state;
    }
    else
    {
        peyre::S = new double[peyre::n*peyre::p*peyre::q];
    }
    
    /// index
    if (index!=NULL)
    {
        peyre::Q = index;
    }
    else
    {
        peyre::Q =  new double[peyre::n*peyre::p*peyre::q];
    }
    
    // launch the propagation
    peyre::perform_front_propagation_3d();
    
    /// delete arrays
    if (state==NULL) delete[] peyre::S;
    if (index==NULL) delete[] peyre::Q;
    
}   /// end fast_marching()



#ifdef __cplusplus
}
#endif
